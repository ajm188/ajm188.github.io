<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home</title><link>https://a.ndrw.dev/</link><description>Recent content on Home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Dec 2022 06:36:44 -0500</lastBuildDate><atom:link href="https://a.ndrw.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>humans.txt</title><link>https://a.ndrw.dev/posts/humanstxt/</link><pubDate>Wed, 21 Dec 2022 06:36:44 -0500</pubDate><guid>https://a.ndrw.dev/posts/humanstxt/</guid><description>I just added a humans.txt file to this site.
I learned about this idea a few weeks back and really liked it! It&amp;rsquo;s simple, it&amp;rsquo;s plaintext, and it spits in the face of the subtext of robots.txt being &amp;ldquo;the internet is for robots (and not for humans).&amp;rdquo;
You can read more about it here.
Implementation Details Initially, I tried to &amp;ldquo;just&amp;rdquo; make a Page at the top-level of my content (similar to how my about page) is generated, but have hugo produce a text file instead of HTML.</description></item><item><title>Implementing a Custom gRPC Resolver</title><link>https://a.ndrw.dev/posts/custom-grpc-resolver/</link><pubDate>Tue, 26 Apr 2022 13:13:21 -0400</pubDate><guid>https://a.ndrw.dev/posts/custom-grpc-resolver/</guid><description>For the last few years, I have been working on a project within Vitess called VTAdmin1. It&amp;rsquo;s an operator-friendly API and UI replacement for the older vtcltd UI control panel. In order to function, it needs to make gRPC requests to both vtctld and vtgate components in one (or more!) Vitess deployments.
To connect to vtgate and vtctld components, VTAdmin relies on a Discovery abstraction, which defines an interface for fetching lists of VTGate and Vtctld addresses:</description></item><item><title>miscio</title><link>https://a.ndrw.dev/projects/miscio/</link><pubDate>Sat, 08 Jan 2022 06:35:58 -0500</pubDate><guid>https://a.ndrw.dev/projects/miscio/</guid><description>A miscellaneous collection of io-related utilities that aren&amp;rsquo;t in the Go standard library.</description></item><item><title>sqlx-gen</title><link>https://a.ndrw.dev/projects/sqlx-gen/</link><pubDate>Wed, 28 Jul 2021 21:30:58 -0400</pubDate><guid>https://a.ndrw.dev/projects/sqlx-gen/</guid><description>A small utility to generate Go structs with sqlx tags from MySQL CREATE TABLE statements.</description></item><item><title>go-ff</title><link>https://a.ndrw.dev/projects/go-ff/</link><pubDate>Mon, 24 May 2021 22:20:43 -0400</pubDate><guid>https://a.ndrw.dev/projects/go-ff/</guid><description>A feature flag library in Go, backed by a gRPC service to allow config modification at runtime.</description></item><item><title>VTAdmin</title><link>https://a.ndrw.dev/projects/vtadmin/</link><pubDate>Tue, 08 Dec 2020 23:10:06 -0400</pubDate><guid>https://a.ndrw.dev/projects/vtadmin/</guid><description>VTAdmin is a modern replacement for the vtctld2 web UI, which allows users to manage multiple Vitess clusters from a single API and web UI.
For more information, refer to the README and the original RFC.</description></item><item><title>mainflags</title><link>https://a.ndrw.dev/projects/mainflags/</link><pubDate>Sat, 28 Nov 2020 23:44:29 -0400</pubDate><guid>https://a.ndrw.dev/projects/mainflags/</guid><description>A golangci-lint linter to catch places where you add flags on the global flagset in non-main packages.
This can cause issues in library code where importing packages can add flags to your binary, and also prevent you from defining flags with the same name.</description></item><item><title>go-jsonpb</title><link>https://a.ndrw.dev/projects/go-jsonpb/</link><pubDate>Fri, 25 Sep 2020 19:49:17 -0400</pubDate><guid>https://a.ndrw.dev/projects/go-jsonpb/</guid><description>A small protoc compiler plugin that adds custom json.Marshaler implementations to your protobuf message types to use jsonpb.Marshaler under the hood.
The primary motivation for doing this is to have enums marshaled to their string values, rather than integers, which is the behavior of the standard encoding/json marshaler.</description></item><item><title>About</title><link>https://a.ndrw.dev/about/</link><pubDate>Sun, 19 Apr 2020 13:13:02 -0400</pubDate><guid>https://a.ndrw.dev/about/</guid><description>This site is built with hugo and deployed via GitHub Actions. It is currently styled with simplecss with minor overrides.
The original design and layout was taken from Jessie Frazelle&amp;rsquo;s blog, with minor modifications. This has diverged over time, most notably when I transitioned to simplecss.</description></item><item><title>Let's Encrypt This Blog</title><link>https://a.ndrw.dev/posts/lets-encrypt-gh-pages/</link><pubDate>Mon, 13 Mar 2017 16:54:35 -0400</pubDate><guid>https://a.ndrw.dev/posts/lets-encrypt-gh-pages/</guid><description>Disclaimer First things first, I need to tell you something. For most use cases, the following is going to be unnecessary. If all you want is a blog with the green padlock, maybe with a custom domain, and you&amp;rsquo;re not a masochist, this post is likely useless to you. GitHub pages gives you HTTPS for free. Spend your time reading something more valuable.
Initial Setup However, I am a masochist. Or, maybe I&amp;rsquo;m thinking ahead to future use cases.</description></item><item><title>Literate Conway</title><link>https://a.ndrw.dev/posts/literate-conway/</link><pubDate>Sun, 12 Jun 2016 18:27:34 -0400</pubDate><guid>https://a.ndrw.dev/posts/literate-conway/</guid><description>About a month ago, I sat down to write a Haskell implementation of Conway&amp;rsquo;s Game of Life.
Taking a literate programming approach, let&amp;rsquo;s walk through my solution.
First things first, let&amp;rsquo;s make a Cell type:
1 type Cell = Bool This is nothing more than a simple type alias. The Bool type is a natural way to represent the cell, with live cells being True and dead cells being False.</description></item><item><title>Meepers Creepers</title><link>https://a.ndrw.dev/projects/meepers-creepers/</link><pubDate>Wed, 27 Apr 2016 19:23:30 -0400</pubDate><guid>https://a.ndrw.dev/projects/meepers-creepers/</guid><description>MIPS assembly emulation in MatLab.
Written as a final project for an introduction to MatLab course I took in college. For additional fun, it runs yams, an HTTP server written in MIPS assembly that some friends and I wrote for a computer architecture course.</description></item><item><title>Rails, Travis-CI, and Factory Girl</title><link>https://a.ndrw.dev/posts/rails-travis-ci-and-factory-girl/</link><pubDate>Sat, 18 Apr 2015 13:00:31 -0400</pubDate><guid>https://a.ndrw.dev/posts/rails-travis-ci-and-factory-girl/</guid><description>I spent the better part of tonight trying to debug getting Travis-CI set up on a repository I&amp;rsquo;m working on, so I thought I&amp;rsquo;d write up what the problem was, and hopefully that may eventually help someone else not go through the same headaches.
This gist was the original error I was trying to debug. See line 503 of log.txt for the postgres error.
Before I begin explaining the problem, the fix is to change the Gemfile:</description></item><item><title/><link>https://a.ndrw.dev/humans.txt</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://a.ndrw.dev/humans.txt</guid><description>humans.txt is "an initiative for knowing the people behind a website".
You can read more about the idea at https://humanstxt.org.</description></item></channel></rss>